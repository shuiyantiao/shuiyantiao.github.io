@using Markdig
@inject HttpClient http


<div class="markdown">
    @markupString
</div>

@code {
    private string readingPost = "postlist";

    [Parameter]
    public string ReadingPost
    {
        get => readingPost;
        set => readingPost = value;
    }

    private MarkupString markupString;

    private MarkdownPipeline? pipeline = null;

    protected override async Task OnInitializedAsync()
    {
        // build markdown pipeline on initialized then render markdown post
        pipeline = new Markdig.MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
        var writer = new StringWriter();
        var renderer = new Markdig.Renderers.HtmlRenderer(writer);
        renderer.LinkRewriter = (s =>
        {
            if (s.StartsWith("res"))
                return "./post/" + s;
            else
                return s;
        });
        pipeline.Setup(renderer);
        try
        {
            var markdownText = await http.GetStringAsync($"post/{ReadingPost}.md");
            var document = Markdig.Parsers.MarkdownParser.Parse(markdownText, pipeline);
            renderer.Render(document);
            writer.Flush();
            markupString = new MarkupString(writer.ToString());
        }
        catch (Exception)
        {
            markupString = new MarkupString(Markdig.Markdown.ToHtml("没有找到请求的文章", pipeline));
        }
        await base.OnInitializedAsync();
    }
}
